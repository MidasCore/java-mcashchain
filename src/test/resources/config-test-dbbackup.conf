net {
    type = mainnet
    # type = testnet
}

storage {
    # Directory for storing persistent data
    db.version = 2,
    db.engine = "ROCKSDB",
    db.directory = "database",
    index.directory = "index",

    # You can custom these 14 databases' configs:

    # account, account-index, asset-issue, block, block-index,
    # block_KDB, peers, properties, recent-block, trans,
    # utxo, votes, witness, witness_schedule.

    # Otherwise, db configs will remain defualt and data will be stored in
    # the path of "output-directory" or which is set by "-d" ("--output-directory").

    # Attention: name is a required field that must be set !!!
    properties = [
        //    {
        //      name = "account",
        //      path = "storage_directory_test",
        //      createIfMissing = true,
        //      paranoidChecks = true,
        //      verifyChecksums = true,
        //      compressionType = 1,        // compressed with snappy
        //      blockSize = 4096,           // 4  KB =         4 * 1024 B
        //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
        //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
        //      maxOpenFiles = 100
        //    },
        //    {
        //      name = "account-index",
        //      path = "storage_directory_test",
        //      createIfMissing = true,
        //      paranoidChecks = true,
        //      verifyChecksums = true,
        //      compressionType = 1,        // compressed with snappy
        //      blockSize = 4096,           // 4  KB =         4 * 1024 B
        //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
        //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
        //      maxOpenFiles = 100
        //    },
    ]

    needToUpdateAsset = true

    backup = {
        enable = true
        properties = "test_prop.properties"
        bak1path = "bak1/database"
        bak2path = "bak2/database"
        frequency = 10000 // backup db every ? blocks processed.
    }
}

node.discovery = {
    enable = true
    persist = true
    bind.ip = ""
    external.ip = null
}

node.backup {
    port = 10001

    # my priority, each member should use different priority
    priority = 8

    # peer's ip list, can't contain mine
    members = [
        # "ip",
        # "ip"
    ]
}

node {
    # trust node for solidity node
    # trustNode = "ip:port"
    trustNode = "127.0.0.1:50051"

    # expose extension api to public or not
    walletExtensionApi = true

    listen.port = 18888

    connection.timeout = 2

    tcpNettyWorkThreadNum = 0

    udpNettyWorkThreadNum = 1

    # Number of validate sign thread, default availableProcessors / 2
    # validateSignThreadNum = 16

    connectFactor = 0.3
    activeConnectFactor = 0.1

    maxActiveNodes = 30

    maxActiveNodesWithSameIp = 2

    minParticipationRate = 15

    # check the peer data transfer ,disconnect factor
    disconnectNumberFactor = 0.4
    maxConnectNumberFactor = 0.8
    receiveTcpMinDataLength = 2048
    isOpenFullTcpDisconnect = true

    p2p {
        version = 11111 # 11111: mainnet; 20180622: testnet
    }

    active = [
        # Active establish connection in any case
        # Sample entries:
        # "ip:port",
        # "ip:port"
    ]

    passive = [
        # Passive accept connection in any case
        # Sample entries:
        # "ip:port",
        # "ip:port"
    ]

    http {
        fullNodePort = 8090
        solidityPort = 8091
    }

    rpc {
        port = 50051
        #solidityPort = 50061
        # Number of gRPC thread, default availableProcessors / 2
        # thread = 16

        # The maximum number of concurrent calls permitted for each incoming connection
        # maxConcurrentCallsPerConnection =

        # The HTTP/2 flow control window, default 1MB
        # flowControlWindow =

        # Connection being idle for longer than which will be gracefully terminated
        maxConnectionIdleInMillis = 60000

        # Connection lasting longer than which will be gracefully terminated
        # maxConnectionAgeInMillis =

        # The maximum message size allowed to be received on the server, default 4MB
        # maxMessageSize =

        # The maximum size of header list allowed to be received, default 8192
        # maxHeaderListSize =
    }

    # Limits the maximum percentage (default 75%) of producing block interval
    # to provide sufficient time to perform other operations e.g. broadcast block
    # blockProducedTimeOut = 75

    # Limits the maximum number (default 700) of transaction from network layer
    # netMaxTrxPerSecond = 700
}


seed.node = {
    # List of the seed nodes
    # Seed nodes are stable full nodes
    # example:
    # ip.list = [
    #   "ip:port",
    #   "ip:port"
    # ]
    ip.list = [
        "54.236.37.243:18888",
        "52.53.189.99:18888",
        "18.196.99.16:18888",
        "34.253.187.192:18888",
        "52.56.56.149:18888",
        "35.180.51.163:18888",
        "54.252.224.209:18888",
        "18.228.15.36:18888",
        "52.15.93.92:18888",
        "34.220.77.106:18888",
        "13.127.47.162:18888",
        "13.124.62.58:18888",
        "13.229.128.108:18888",
        "35.182.37.246:18888",
        "34.200.228.125:18888",
        "18.220.232.201:18888",
        "13.57.30.186:18888",
        "35.165.103.105:18888",
        "18.184.238.21:18888",
        "34.250.140.143:18888",
        "35.176.192.130:18888",
        "52.47.197.188:18888",
        "52.62.210.100:18888",
        "13.231.4.243:18888",
        "18.231.76.29:18888",
        "35.154.90.144:18888",
        "13.125.210.234:18888",
        "13.250.40.82:18888",
        "35.183.101.48:18888"
    ]
}

genesis.block = {
    # Reserve balance
    assets = [
        {
            accountName = "Devaccount"
            accountType = "AssetIssue"
            address = "MxvptzVkurgcje63ryEuzSnQN33o"
            balance = "1000000000000000000"
        },
        {
            accountName = "Zion"
            accountType = "AssetIssue"
            address = "M4B19Jz9fZr2jm45tfVQPiunSRiMP"
            balance = "1500000000000000000"
        },
        {
            accountName = "Sun"
            accountType = "AssetIssue"
            address = "M3d7Vfd7Tey2Qdny8wqxXa7phBgau"
            balance = "1000000000000000000"
        },
        {
            accountName = "Blackhole"
            accountType = "AssetIssue"
            address = "MGGRsgmrYXdU7MxWizQLiruF4Rq3"
            balance = "-9223372036854775808"
        }
    ]

    witnesses = [
        {
            address: M4TdJsXTdmUR7F1GKEernz1rpKfXZ,
            ownerAddress: M3oCiCSwbmS26VwQZuJLmdDv6396e,
            url = "http://Mercury.org",
            voteCount = 105
        },
        {
            address: M2rJLLGE9CWuYBoa9V5PTgQ7rhVtV,
            ownerAddress: M3oCiCSwbmS26VwQZuJLmdDv6396e,
            url = "http://Venus.org",
            voteCount = 104
        },
        {
            address: MbnUNGKyVCSzkvii5iHrRTML5iw4,
            ownerAddress: M3oCiCSwbmS26VwQZuJLmdDv6396e,
            url = "http://Earth.org",
            voteCount = 103
        }
    ]

    timestamp = "0" #2017-8-26 12:00:00

    parentHash = "0xe58f33f9baf9305dc6f82b9f1934ea8f0ade2defb951258d50167028c780351f"
}

localwitness = [
]

#localwitnesskeystore = [
#  "localwitnesskeystore.json"
#]

block = {
    needSyncCheck = true
    maintenanceTimeInterval = 21600000
    proposalExpireTime = 259200000 // 3 day: 259200000(ms)
}

# Transaction reference block, default is "head", configure to "solid" can avoid TaPos error
# trx.reference.block = "head" // head;solid;

vm = {
    supportConstant = false
    minTimeRatio = 0.0
    maxTimeRatio = 5.0

    # In rare cases, transactions that will be within the specified maximum execution time (default 10(ms)) are re-executed and packaged
    # longRunningTime = 10
}

committee = {
    allowCreationOfContracts = 0  //mainnet:0 (reset by committee),test:1
    allowAdaptiveEnergy = 0  //mainnet:0 (reset by committee),test:1
}

log.level = {
    root = "INFO" // TRACE;DEBUG;INFO;WARN;ERROR
}
