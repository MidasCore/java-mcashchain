net {
    type = mainnet
    # type = testnet
}

storage {
    # Directory for storing persistent data

    db.directory = "database",
    index.directory = "index",

    # You can custom these 14 databases' configs:

    # account, account-index, asset-issue, block, block-index,
    # block_KDB, peers, properties, recent-block, trans,
    # utxo, votes, witness, witness_schedule.

    # Otherwise, db configs will remain defualt and data will be stored in
    # the path of "output-directory" or which is set by "-d" ("--output-directory").

    # Attention: name is a required field that must be set !!!
    properties = [
        //    {
        //      name = "account",
        //      path = "storage_directory_test",
        //      createIfMissing = true,
        //      paranoidChecks = true,
        //      verifyChecksums = true,
        //      compressionType = 1,        // compressed with snappy
        //      blockSize = 4096,           // 4  KB =         4 * 1024 B
        //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
        //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
        //      maxOpenFiles = 100
        //    },
        //    {
        //      name = "account-index",
        //      path = "storage_directory_test",
        //      createIfMissing = true,
        //      paranoidChecks = true,
        //      verifyChecksums = true,
        //      compressionType = 1,        // compressed with snappy
        //      blockSize = 4096,           // 4  KB =         4 * 1024 B
        //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
        //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
        //      maxOpenFiles = 100
        //    },
    ]

    needToUpdateAsset = true

}

node.discovery = {
    enable = true
    persist = true
    bind.ip = ""
    external.ip = null
}

node.backup {
    port = 10001
    priority = 8
    members = [
    ]
}

node {
    # trust node for solidity node
    # trustNode = "ip:port"
    trustNode = "127.0.0.1:50051"

    # expose extension api to public or not
    walletExtensionApi = true

    listen.port = 11399

    connection.timeout = 2

    tcpNettyWorkThreadNum = 0

    udpNettyWorkThreadNum = 1

    # Number of validate sign thread, default availableProcessors / 2
    # validateSignThreadNum = 16

    connectFactor = 0.3
    activeConnectFactor = 0.1

    maxActiveNodes = 30

    maxActiveNodesWithSameIp = 2

    minParticipationRate = 30

    # check the peer data transfer ,disconnect factor
    disconnectNumberFactor = 0.4
    maxConnectNumberFactor = 0.8
    receiveTcpMinDataLength = 2048
    isOpenFullTcpDisconnect = true

    p2p {
        version = 20190506
    }

    active = [
        # Active establish connection in any case
        # Sample entries:
        # "ip:port",
        # "ip:port"
    ]

    passive = [
        # Passive accept connection in any case
        # Sample entries:
        # "ip:port",
        # "ip:port"
    ]

    http {
        fullNodePort = 8090
        solidityPort = 8091
    }

    rpc {
        port = 50051

        # Number of gRPC thread, default availableProcessors / 2
        # thread = 16

        # The maximum number of concurrent calls permitted for each incoming connection
        # maxConcurrentCallsPerConnection =

        # The HTTP/2 flow control window, default 1MB
        # flowControlWindow =

        # Connection being idle for longer than which will be gracefully terminated
        maxConnectionIdleInMillis = 60000

        # Connection lasting longer than which will be gracefully terminated
        # maxConnectionAgeInMillis =

        # The maximum message size allowed to be received on the server, default 4MB
        # maxMessageSize =

        # The maximum size of header list allowed to be received, default 8192
        # maxHeaderListSize =
    }

}


seed.node = {
    # List of the seed nodes
    # Seed nodes are stable full nodes
    # example:
    # ip.list = [
    #   "ip:port",
    #   "ip:port"
    # ]
    ip.list = [
    ]
}

genesis.block = {
    # Reserve balance
    assets = [
        {
            accountName = "Zion"
            accountType = "AssetIssue"
            address = "M4B19Jz9fZr2jm45tfVQPiunSRiMP"
            balance = "110000000000000000"
        },
        {
            accountName = "Sun"
            accountType = "AssetIssue"
            address = "M3d7Vfd7Tey2Qdny8wqxXa7phBgau"
            balance = "0"
        },
        {
            accountName = "Blackhole"
            accountType = "AssetIssue"
            address = "MGGRsgmrYXdU7MxWizQLiruF4Rq3"
            balance = "-9223372036854775808"
        },
        {
            accountName = "Dev"
            accountType = "AssetIssue"
            address = "M3oCiCSwbmS26VwQZuJLmdDv6396e"
            balance = "100000000000000"
        }
    ]

    witnesses = [
        {
            address: M4TdJsXTdmUR7F1GKEernz1rpKfXZ,
            url = "https://midasprotocol.io",
            voteCount = 20000
        }
    ]

    timestamp = "0" #2017-8-26 12:00:00

    parentHash = "0x0000000000000000000000000000000000000000000000000000000000000000"
}

#localwitness = [
#]

localwitnesskeystore = [
]

block = {
    needSyncCheck = false
    maintenanceTimeInterval = 600000
    proposalExpireTime = 600000 // 3 day: 259200000(ms)
}


vm = {
    supportConstant = true
    minTimeRatio = 0.0
    maxTimeRatio = 5.0
}

committee = {
    allowCreationOfContracts = 0  //mainnet:0 (reset by committee),test:1
}

log.level = {
    root = "TRACE" // TRACE;DEBUG;INFO;WARN;ERROR
}
