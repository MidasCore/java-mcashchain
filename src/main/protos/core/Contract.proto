/*
 * java-tron is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * java-tron is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package protocol;

option java_package = "io.midasprotocol.protos"; //Specify the name of the package that generated the Java file
option java_outer_classname = "Contract"; //Specify the class name of the generated Java file

import "core/Object.proto";

message AccountCreateContract {
    bytes ownerAddress = 1;
    bytes accountAddress = 2;
    AccountType type = 3;
}

// Update account name. Account name is not unique now.
message AccountUpdateContract {
    bytes accountName = 1;
    bytes ownerAddress = 2;
}

// Set account id if the account has no id. Account id is unique and case insensitive.
message SetAccountIdContract {
    bytes accountId = 1;
    bytes ownerAddress = 2;
}

message TransferContract {
    bytes ownerAddress = 1;
    bytes toAddress = 2;
    int64 amount = 3;
}

message TransferAssetContract {
    int64 assetId = 1;
    bytes ownerAddress = 2;
    bytes toAddress = 3;
    int64 amount = 4;
}


message VoteAssetContract {
    bytes ownerAddress = 1;
    repeated bytes voteAddress = 2;
    bool support = 3;
    int32 count = 5;
}

message VoteWitnessContract {
    message Vote {
        bytes voteAddress = 1;
        int64 voteCount = 2;
    }
    bytes ownerAddress = 1;
    Vote vote = 2;
    bool support = 3;
}

message UpdateSettingContract {
    bytes ownerAddress = 1;
    bytes contractAddress = 2;
    int64 consumeUserResourcePercent = 3;
}

message UpdateEnergyLimitContract {
    bytes ownerAddress = 1;
    bytes contractAddress = 2;
    int64 originEnergyLimit = 3;
}

message WitnessCreateContract {
    bytes ownerAddress = 1;
    bytes witnessAddress = 2;
    bytes url = 3;
}

message WitnessResignContract {
    bytes ownerAddress = 1;
    bytes witnessAddress = 2;
}

message WitnessUpdateContract {
    bytes ownerAddress = 1;
    bytes witnessAddress = 2;
    bytes updateUrl = 12;
}

message StakeContract {
    bytes ownerAddress = 1;
    int64 stakeAmount = 2;
    int64 stakeDuration = 3;
}

message UnstakeContract {
    bytes ownerAddress = 1;
}

message AssetIssueContract {
    int64 id = 41;

    message FrozenSupply {
        int64 frozenAmount = 1;
        int64 frozenDays = 2;
    }
    bytes ownerAddress = 1;
    bytes name = 2;
    bytes abbr = 3;
    int64 totalSupply = 4;
    repeated FrozenSupply frozenSupply = 5;
    int32 trxNum = 6;
    int32 precision = 7;
    int32 num = 8;
    int64 startTime = 9;
    int64 endTime = 10;
    int64 order = 11; // useless
    int32 voteScore = 16;
    bytes description = 20;
    bytes url = 21;
    int64 freeAssetNetLimit = 22;
    int64 publicFreeAssetNetLimit = 23;
    int64 publicFreeAssetNetUsage = 24;
    int64 publicLatestFreeNetTime = 25;
}

message ParticipateAssetIssueContract {
    bytes ownerAddress = 1;
    bytes toAddress = 2;
    int64 assetId = 3;
    int64 amount = 4; // the amount of drops
}


enum ResourceCode {
    BANDWIDTH = 0x00;
    ENERGY = 0x01;
}

message FreezeBalanceContract {
    bytes ownerAddress = 1;
    int64 frozenBalance = 2;
    int64 frozenDuration = 3;

    ResourceCode resource = 10;
    bytes receiverAddress = 15;
}

message UnfreezeBalanceContract {
    bytes ownerAddress = 1;

    ResourceCode resource = 10;
    bytes receiverAddress = 15;
}

message UnfreezeAssetContract {
    bytes ownerAddress = 1;
}

message WithdrawBalanceContract {
    bytes ownerAddress = 1;
}

message UpdateAssetContract {
    bytes ownerAddress = 1;
    bytes description = 2;
    bytes url = 3;
    int64 newLimit = 4;
    int64 newPublicLimit = 5;
}

message ProposalCreateContract {
    bytes ownerAddress = 1;
    map<int64, int64> parameters = 2;
}

message ProposalApproveContract {
    bytes ownerAddress = 1;
    int64 proposalId = 2;
    bool isAddApproval = 3; // add or remove approval
}

message ProposalDeleteContract {
    bytes ownerAddress = 1;
    int64 proposalId = 2;
}

message CreateSmartContract {
    bytes ownerAddress = 1;
    SmartContract newContract = 2;
    int64 callTokenValue = 3;
    int64 tokenId = 4;
}

message TriggerSmartContract {
    bytes ownerAddress = 1;
    bytes contractAddress = 2;
    int64 callValue = 3;
    bytes data = 4;
    int64 callTokenValue = 5;
    int64 tokenId = 6;
}

message BuyStorageContract {
    bytes ownerAddress = 1;
    int64 quant = 2; // trx quantity for buy storage (sun)
}

message BuyStorageBytesContract {
    bytes ownerAddress = 1;
    int64 bytes = 2; // storage bytes for buy
}

message SellStorageContract {
    bytes ownerAddress = 1;
    int64 storageBytes = 2;
}

message ExchangeCreateContract {
    bytes ownerAddress = 1;
    int64 firstTokenId = 2;
    int64 firstTokenBalance = 3;
    int64 secondTokenId = 4;
    int64 secondTokenBalance = 5;
}

message ExchangeInjectContract {
    bytes ownerAddress = 1;
    int64 exchangeId = 2;
    int64 tokenId = 3;
    int64 quant = 4;
}

message ExchangeWithdrawContract {
    bytes ownerAddress = 1;
    int64 exchangeId = 2;
    int64 tokenId = 3;
    int64 quant = 4;
}

message ExchangeTransactionContract {
    bytes ownerAddress = 1;
    int64 exchangeId = 2;
    int64 tokenId = 3;
    int64 quant = 4;
    int64 expected = 5;
}

message AccountPermissionUpdateContract {
    bytes ownerAddress = 1;
    Permission owner = 2; //Empty is invalidate
    Permission witness = 3; //Can be empty
    repeated Permission actives = 4; //Empty is invalidate
}