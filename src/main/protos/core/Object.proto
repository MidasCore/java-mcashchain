syntax = "proto3";

import "google/protobuf/any.proto";
import "core/Discover.proto";

package protocol;


option java_package = "io.midasprotocol.protos"; //Specify the name of the package that generated the Java file
option java_outer_classname = "Protocol"; //Specify the class name of the generated Java file
option go_package = "mcashscan/app/client/core";

enum AccountType {
    Normal = 0;
    AssetIssue = 1;
    Contract = 2;
}

// AccountId, (name, address) use name, (null, address) use address, (name, null) use name
message AccountId {
    bytes name = 1;
    bytes address = 2;
}

// vote message
message Vote {
    // witness address
    bytes vote_address = 1;
    // the vote num to this witness
    int64 vote_count = 2;
}

// Proposal
message Proposal {
    int64 proposal_id = 1;
    bytes proposer_address = 2;
    map<int64, int64> parameters = 3;
    int64 expiration_time = 4;
    int64 create_time = 5;
    repeated bytes approvals = 6;
    enum State {
        PENDING = 0;
        DISAPPROVED = 1;
        APPROVED = 2;
        CANCELED = 3;
    }
    State state = 7;
}

// Exchange
message Exchange {
    int64 exchange_id = 1;
    bytes creator_address = 2;
    int64 create_time = 3;
    int64 first_token_id = 6;
    int64 first_token_balance = 7;
    int64 second_token_id = 8;
    int64 second_token_balance = 9;
}

message ChainParameters {
    repeated ChainParameter chain_parameter = 1;
    message ChainParameter {
        string key = 1;
        int64 value = 2;
    }
}

/* Account */
message Account {
    /* frozen balance */
    message Frozen {
        int64 frozen_balance = 1; // the frozen balance
        int64 expire_time = 2; // the expire time
    }

    message DelegatedFrozen {
        int64 acquired_delegated_balance = 1;
        int64 delegated_balance = 2;
    }

    // account nick name
    bytes account_name = 1;
    AccountType type = 2;
    // the create address
    bytes address = 3;
    // the trx balance
    int64 balance = 4;
    // the vote
    Vote vote = 5;
    // the other asset owned by this account
    map<int64, int64> assets = 6;

    Frozen frozen_for_bandwidth = 7;
    Frozen frozen_for_energy = 8;
    repeated Frozen frozen_assets = 9;
    DelegatedFrozen delegated_frozen_for_bandwidth = 10;
    DelegatedFrozen delegated_frozen_for_energy = 11;

    // this account create time
    int64 create_time = 12;
    // this last operation time, including transfer, voting and so on
    int64 latest_operation_time = 13;
    // reward balance
    int64 allowance = 14;
    // last withdraw time
    int64 latest_withdraw_time = 15;
    bool is_witness = 16;
    bool is_committee = 17;
    // asset_issued_id
    int64 asset_issued_id = 18;

    // the identity of this account, case insensitive
    bytes account_id = 20;

    message AccountResource {
        int64 bandwidth_usage = 1;
        int64 latest_bandwidth_consume_time = 2;
        int64 free_bandwidth_usage = 3;
        int64 latest_free_bandwidth_consume_time = 4;
        int64 energy_usage = 5;
        int64 latest_energy_consume_time = 6;
        map<int64, int64> asset_free_bandwidth_usage = 7;
        map<int64, int64> latest_asset_operation_time = 8;
    }

    AccountResource account_resource = 21;

    bytes code_hash = 30;
    Permission owner_permission = 31;
    Permission witness_permission = 32;
    repeated Permission active_permission = 33;

    // stakes
    Stake stake = 40;
    Stake witness_stake = 41;
}


message Key {
    bytes address = 1;
    int64 weight = 2;
}

message DelegatedResource {
    bytes from = 1;
    bytes to = 2;
    int64 frozen_balance_for_bandwidth = 3;
    int64 frozen_balance_for_energy = 4;
    int64 expire_time_for_bandwidth = 5;
    int64 expire_time_for_energy = 6;
}

message authority {
    AccountId account = 1;
    bytes permission_name = 2;
}

message Permission {
    enum PermissionType {
        Owner = 0;
        Witness = 1;
        Active = 2;
    }
    PermissionType type = 1;
    int32 id = 2; //Owner id=0, Witness id=1, Active id start by 2
    string permission_name = 3;
    int64 threshold = 4;
    int32 parent_id = 5;
    bytes operations = 6; //1 bit 1 contract
    repeated Key keys = 7;
}

// Witness
message Witness {
    enum Status {
        ACTIVE = 0;
        SUPERNODE = 1;
        SLASHED = 2;
        RESIGNED = 3;
    }
    bytes address = 1;
    int64 vote_count = 2;
    bytes pub_key = 3;
    string url = 4;
    int64 total_produced = 5;
    int64 total_missed = 6;
    int64 latest_block_num = 7;
    int64 latest_slot_num = 8;
    bool is_jobs = 9;
    Status status = 10;
    bytes owner_address = 11;
    int64 epoch_produced = 12;
    int64 epoch_missed = 13;
}

message BannedWitness {
    bytes witness_address = 1;
    int64 expiration_time = 2;
}

// Vote Change
message VoteChange {
    bytes address = 1;
    Vote old_vote = 2;
    Vote new_vote = 3;
}

message Stake {
    int64 stake_amount = 1;
    int64 expiration_time = 2; // the expire time
}

message StakeChange {
    bytes address = 1;
    int64 old_stake_amount = 2;
    int64 new_stake_amount = 3;
}

message StakeAccount {
    bytes address = 1;
    int64 stake_amount = 2;
    int64 stake_amount_with_bonus = 3;
    int64 voting_power = 4;
}

message BlockReward {
    enum RewardType {
        INFRASTRUCTURE = 0;
        STAKE = 1;
    }
    message Reward {
        bytes address = 1;
        int64 amount = 2;
        RewardType type = 3;
    }
    int64 block_number = 1;
    repeated Reward rewards = 2;
}

// Transaction

message TXOutput {
    int64 value = 1;
    bytes pub_key_hash = 2;
}

message TXInput {
    message raw {
        bytes tx_id = 1;
        int64 vout = 2;
        bytes pub_key = 3;
    }
    raw raw_data = 1;
    bytes signature = 4;
}

message TXOutputs {
    repeated TXOutput outputs = 1;
}

message ResourceReceipt {
    int64 energy_usage = 1;
    int64 energy_fee = 2;
    int64 origin_energy_usage = 3;
    int64 energy_usage_total = 4;
    int64 bandwidth_usage = 5;
    int64 bandwidth_fee = 6;
    Transaction.Result.ContractResult result = 7;
}

message Transaction {
    message Contract {
        enum ContractType {
            AccountCreateContract = 0;
            TransferContract = 1;
            TransferAssetContract = 2;
            VoteAssetContract = 3;
            VoteWitnessContract = 4;
            WitnessCreateContract = 5;
            AssetIssueContract = 6;
            WitnessUpdateContract = 8;
            ParticipateAssetIssueContract = 9;
            AccountUpdateContract = 10;
            FreezeBalanceContract = 11;
            UnfreezeBalanceContract = 12;
            WithdrawBalanceContract = 13;
            UnfreezeAssetContract = 14;
            UpdateAssetContract = 15;
            ProposalCreateContract = 16;
            ProposalApproveContract = 17;
            ProposalDeleteContract = 18;
            SetAccountIdContract = 19;
            CustomContract = 20;
            CreateSmartContract = 30;
            TriggerSmartContract = 31;
            GetContract = 32;
            UpdateSettingContract = 33;
            ExchangeCreateContract = 41;
            ExchangeInjectContract = 42;
            ExchangeWithdrawContract = 43;
            ExchangeTransactionContract = 44;
            UpdateEnergyLimitContract = 45;
            AccountPermissionUpdateContract = 46;
            StakeContract = 47;
            UnstakeContract = 48;
            WitnessResignContract = 49;
            ClearAbiContract = 50;
        }
        ContractType type = 1;
        google.protobuf.Any parameter = 2;
        bytes provider = 3;
        bytes contract_name = 4;
        int32 permission_id = 5;
    }

    message Result {
        enum Code {
            SUCCESS = 0;
            FAILED = 1;
        }
        enum ContractResult {
            DEFAULT = 0;
            OK = 1;
            REVERT = 2;
            BAD_JUMP_DESTINATION = 3;
            OUT_OF_MEMORY = 4;
            PRECOMPILED_CONTRACT = 5;
            STACK_TOO_SMALL = 6;
            STACK_TOO_LARGE = 7;
            ILLEGAL_OPERATION = 8;
            STACK_OVERFLOW = 9;
            OUT_OF_ENERGY = 10;
            OUT_OF_TIME = 11;
            JVM_STACK_OVER_FLOW = 12;
            UNKNOWN = 13;
            TRANSFER_FAILED = 14;
        }
        int64 fee = 1;
        Code code = 2;
        ContractResult contract_result = 3;

        int64 asset_issue_id = 14;
        int64 withdraw_amount = 15;
        int64 unfreeze_amount = 16;
        int64 exchange_received_amount = 18;
        int64 exchange_inject_another_amount = 19;
        int64 exchange_withdraw_another_amount = 20;
        int64 exchange_id = 21;
        int64 unstake_amount = 22;
        int64 vote_count = 23;
    }

    message Raw {
        bytes ref_block_bytes = 1;
        int64 ref_block_num = 3;
        bytes ref_block_hash = 4;
        int64 expiration = 8;
        repeated authority auths = 9;
        // data not used
        bytes data = 10;
        //only support size = 1,  repeated list here for extension
        repeated Contract contract = 11;
        // scripts not used
        bytes scripts = 12;
        int64 timestamp = 14;
        int64 fee_limit = 18;
    }

    Raw raw_data = 1;
    // only support size = 1,  repeated list here for multi-sig extension
    repeated bytes signature = 2;
    repeated Result ret = 5;
}

message TransactionInfo {
    enum Code {
        SUCCESS = 0;
        FAILED = 1;
    }
    message Log {
        bytes address = 1;
        repeated bytes topics = 2;
        bytes data = 3;
    }
    bytes id = 1;
    int64 fee = 2;
    int64 block_number = 3;
    int64 block_time_stamp = 4;
    repeated bytes contract_result = 5;
    bytes contract_address = 6;
    ResourceReceipt receipt = 7;
    repeated Log log = 8;
    Code result = 9;
    bytes res_message = 10;

    int64 asset_issue_id = 14;
    int64 withdraw_amount = 15;
    int64 unfreeze_amount = 16;
    repeated InternalTransaction internal_transactions = 17;
    int64 exchange_received_amount = 18;
    int64 exchange_inject_another_amount = 19;
    int64 exchange_withdraw_another_amount = 20;
    int64 exchange_id = 21;
    int64 unstake_amount = 22;
    int64 vote_count = 23;
}

message Transactions {
    repeated Transaction transactions = 1;
}

message TransactionSign {
    Transaction transaction = 1;
    bytes private_key = 2;
}

message BlockHeader {
    message Raw {
        int64 timestamp = 1;
        bytes tx_trie_root = 2;
        bytes parent_hash = 3;
        //bytes nonce = 5;
        //bytes difficulty = 6;
        int64 number = 7;
        int64 witness_id = 8;
        bytes witness_address = 9;
        int32 version = 10;
    }
    Raw raw_data = 1;
    bytes witness_signature = 2;
}

// block
message Block {
    repeated Transaction transactions = 1;
    BlockHeader block_header = 2;
}

message ChainInventory {
    message BlockId {
        bytes hash = 1;
        int64 number = 2;
    }
    repeated BlockId ids = 1;
    int64 remain_num = 2;
}

// Inventory
message BlockInventory {
    enum Type {
        SYNC = 0;
        ADVTISE = 1;
        FETCH = 2;
    }

    message BlockId {
        bytes hash = 1;
        int64 number = 2;
    }
    repeated BlockId ids = 1;
    Type type = 2;
}

message Inventory {
    enum InventoryType {
        TRX = 0;
        BLOCK = 1;
    }
    InventoryType type = 1;
    repeated bytes ids = 2;
}

message Items {
    enum ItemType {
        ERR = 0;
        TRX = 1;
        BLOCK = 2;
        BLOCKHEADER = 3;
    }

    ItemType type = 1;
    repeated Block blocks = 2;
    repeated BlockHeader block_headers = 3;
    repeated Transaction transactions = 4;
}

// DynamicProperties
message DynamicProperties {
    int64 last_solidity_block_num = 1;
}

enum ReasonCode {
    REQUESTED = 0x00;
    BAD_PROTOCOL = 0x02;
    TOO_MANY_PEERS = 0x04;
    DUPLICATE_PEER = 0x05;
    INCOMPATIBLE_PROTOCOL = 0x06;
    NULL_IDENTITY = 0x07;
    PEER_QUITING = 0x08;
    UNEXPECTED_IDENTITY = 0x09;
    LOCAL_IDENTITY = 0x0A;
    PING_TIMEOUT = 0x0B;
    USER_REASON = 0x10;
    RESET = 0x11;
    SYNC_FAIL = 0x12;
    FETCH_FAIL = 0x13;
    BAD_TX = 0x14;
    BAD_BLOCK = 0x15;
    FORKED = 0x16;
    UNLINKABLE = 0x17;
    INCOMPATIBLE_VERSION = 0x18;
    INCOMPATIBLE_CHAIN = 0x19;
    TIME_OUT = 0x20;
    CONNECT_FAIL = 0x21;
    TOO_MANY_PEERS_WITH_SAME_IP = 0x22;
    UNKNOWN = 0xFF;
}

message DisconnectMessage {
    ReasonCode reason = 1;
}

message HelloMessage {
    message BlockId {
        bytes hash = 1;
        int64 number = 2;
    }

    Endpoint from = 1;
    int32 version = 2;
    int64 timestamp = 3;
    BlockId genesis_block_id = 4;
    BlockId solid_block_id = 5;
    BlockId head_block_id = 6;
}

message SmartContract {
    message ABI {
        message Entry {
            enum EntryType {
                UnknownEntryType = 0;
                Constructor = 1;
                Function = 2;
                Event = 3;
                Fallback = 4;
            }
            message Param {
                bool indexed = 1;
                string name = 2;
                string type = 3;
                // SolidityType type = 3;
            }
            enum StateMutabilityType {
                UnknownMutabilityType = 0;
                Pure = 1;
                View = 2;
                Nonpayable = 3;
                Payable = 4;
            }

            bool anonymous = 1;
            bool constant = 2;
            string name = 3;
            repeated Param inputs = 4;
            repeated Param outputs = 5;
            EntryType type = 6;
            bool payable = 7;
            StateMutabilityType stateMutability = 8;
        }
        repeated Entry entrys = 1;
    }
    bytes origin_address = 1;
    bytes contract_address = 2;
    ABI abi = 3;
    bytes bytecode = 4;
    int64 call_value = 5;
    int64 consume_user_resource_percent = 6;
    string name = 7;
    int64 origin_energy_limit = 8;

}

message InternalTransaction {
    // internalTransaction identity, the root InternalTransaction hash
    // should equals to root transaction id.
    bytes hash = 1;
    // the one send mcash (TBD: or token) via function
    bytes caller_address = 2;
    // the one receive mcash (TBD: or token) via function
    bytes transfer_to_address = 3;
    message CallValueInfo {
        int64 call_value = 1;
        // TBD: token_id, trx should be empty
        int64 token_id = 2;
    }
    repeated CallValueInfo call_value_info = 4;
    bytes note = 5;
    bool rejected = 6;
}

message DelegatedResourceAccountIndex {
    bytes account = 1;
    repeated bytes from_accounts = 2;
    repeated bytes to_accounts = 3;
}

message NodeInfo {
    int64 begin_sync_num = 1;
    string block = 2;
    string solidity_block = 3;
    //connect information
    int32 current_connect_count = 4;
    int32 active_connect_count = 5;
    int32 passive_connect_count = 6;
    int64 total_flow = 7;
    repeated PeerInfo peer_info_list = 8;
    ConfigNodeInfo config_node_info = 9;
    MachineInfo machine_info = 10;
    map<string, string> cheat_witness_info_map = 11;

    message PeerInfo {
        string last_sync_block = 1;
        int64 remain_num = 2;
        int64 last_block_update_time = 3;
        bool sync_flag = 4;
        int64 head_block_time_we_both_have = 5;
        bool need_sync_from_peer = 6;
        bool need_sync_from_us = 7;
        string host = 8;
        int32 port = 9;
        string node_id = 10;
        int64 connect_time = 11;
        double avg_latency = 12;
        int32 sync_to_fetch_size = 13;
        int64 sync_to_fetch_size_peek_num = 14;
        int32 sync_block_requested_size = 15;
        int64 unfetch_syn_num = 16;
        int32 block_in_porc_size = 17;
        string head_block_we_both_have = 18;
        bool is_active = 19;
        int32 score = 20;
        int32 node_count = 21;
        int64 in_flow = 22;
        int32 disconnect_times = 23;
        string local_disconnect_reason = 24;
        string remote_disconnect_reason = 25;
    }

    message ConfigNodeInfo {
        string code_version = 1;
        string p2p_version = 2;
        int32 listen_port = 3;
        bool discover_enable = 4;
        int32 active_node_size = 5;
        int32 passive_node_size = 6;
        int32 send_node_size = 7;
        int32 max_connect_count = 8;
        int32 same_ip_max_connect_count = 9;
        int32 backup_listen_port = 10;
        int32 backup_member_size = 11;
        int32 backup_priority = 12;
        int32 db_version = 13;
        int32 min_participation_rate = 14;
        bool support_constant = 15;
        double min_time_ratio = 16;
        double max_time_ratio = 17;
        int64 allow_creation_of_contracts = 18;
        int64 allow_adaptive_energy = 19;
    }

    message MachineInfo {
        int32 thread_count = 1;
        int32 dead_lock_thread_count = 2;
        int32 cpu_count = 3;
        int64 total_memory = 4;
        int64 free_memory = 5;
        double cpu_rate = 6;
        string java_version = 7;
        string os_name = 8;
        int64 jvm_total_memory = 9;
        int64 jvm_free_memory = 10;
        double process_cpu_rate = 11;
        repeated MemoryDescInfo memory_desc_info_list = 12;
        repeated DeadLockThreadInfo dead_lock_thread_info_list = 13;

        message MemoryDescInfo {
            string name = 1;
            int64 init_size = 2;
            int64 use_size = 3;
            int64 max_size = 4;
            double use_rate = 5;
        }

        message DeadLockThreadInfo {
            string name = 1;
            string lock_name = 2;
            string lock_owner = 3;
            string state = 4;
            int64 block_time = 5;
            int64 wait_time = 6;
            string stack_trace = 7;
        }
    }
}